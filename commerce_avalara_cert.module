<?php

/**
 * @file
 * Avalara CertCapture service integration from Avalara, Inc.
 */

/**
 * Implements hook_menu().
 */
function commerce_avalara_cert_menu() {
  $items = array();

  $items['admin/commerce/config/avalara-cert'] = array(
    'title' => 'Avalara CertCapture ',
    'description' => 'Avalara CertCapture Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_avalara_cert_settings_form'),
    'file' => 'includes/commerce_avalara_cert.admin.inc',
    'access arguments' => array('administer commerce_avalara_cert'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['user/%user/tax-certificates'] = array(
    'title' => 'Tax certificates',
    'page callback' => 'commerce_avalara_cert_user_page',
    'page arguments' => array(1),
    'access callback' => 'commerce_avalara_cert_user_page_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/commerce_avalara_cert.user.inc',
    'weight' => 20,
  );

  $items['avalara-cert/%/download'] = array(
    'page callback' => 'commerce_avalara_cert_download',
    'page arguments' => array(1),
    'access callback' => 'commerce_avalara_cert_download_access',
    'access arguments' => array(1),
    'file' => 'includes/commerce_avalara_cert.user.inc',
    'type' => MENU_CALLBACK,
  );

  $items['avalara-cert/ajax-checkout'] = array(
    'delivery callback' => 'ajax_deliver',
    'theme callback' => 'ajax_base_page_theme',
    'page callback' => 'commerce_avalara_cert_checkout_ajax',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Access callback: determines access to the "Tax certificates" user page.
 */
function commerce_avalara_cert_user_page_access($account) {
  if (user_access('administer commerce_avalara_cert')) {
    return TRUE;
  }
  global $user;

  // If the user doesn't have the "administer commerce_avalara_cert" permission
  // & passed account is not the same as the logged in user, return FALSE.
  if ($account->uid != $user->uid) {
    return FALSE;
  }

  return user_access('view own tax certificates');
}


/**
 * Access callback: determines access to download certificate.
 */
function commerce_avalara_cert_download_access($account) {
  global $user;
  return (!user_is_anonymous() && $account->uid == $user->uid);
}

/**
 * Ajax callback for the "create certificate" link.
 */
function commerce_avalara_cert_checkout_ajax() {
  if (user_is_anonymous()) {
    return MENU_NOT_FOUND;
  }
  $commands = array();
  global $user;
  $account = user_load($user->uid);
  $account_wrapper = entity_metadata_wrapper('user', $account);
  $customer_number = $account_wrapper->commerce_avalara_customer_number->value();
  $error = FALSE;

  // If we don't have a customer number, we need to call Avalara to create one.
  if (empty($customer_number)) {
    try {
      $avalara = commerce_avalara_cert_object();
      $result = $avalara->customersGenerateNumber();

      if (isset($result['customer_number'])) {
        $result = $avalara->customersCreate(array('customer_number' => $result['customer_number']));

        // If we got an ID back from Avalara, this mean the user got created,
        // in that case, we need to save it.
        if (isset($result['id'])) {
          $customer_number = $result['customer_number'];
          $account_wrapper->commerce_avalara_customer_number->set($customer_number);
          $account_wrapper->save();
        }
      }
    }
    catch (Exception $e) {
      watchdog_exception('commerce_avalara_cert', $e);
      $error = TRUE;
    }
  }

  // We should probably display an error message in case something went wrong.
  if ($error || empty($customer_number)) {
    return MENU_NOT_FOUND;
  }

  // Open a modal containing the certificate submission form.
  $commands[] = array(
    'command' => 'commerce_avalara_cert_checkout_modal_display',
    'selector' => '#commerce-avalara-cert-checkout-dialog',
    'initSettings' => array(
      'customer_number' => $customer_number,
    ),
  );
  drupal_alter('commerce_avalara_cert_checkout_ajax_commands', $commands, $account);
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Implements hook_theme().
 */
function commerce_avalara_cert_theme($existing, $type, $theme, $path) {
  return array(
    'commerce_avalara_cert_user_certificates' => array(
      'variables' => array(
        'customer_number' => NULL,
        'table' => '',
      ),
      'template' => 'commerce-avalara-cert-user-certificates',
      'path' => $path . '/theme',
    ),
    'commerce_avalara_cert_checkout' => array(
      'variables' => array(
        'ship_zone' => NULL,
        'text' => NULL,
      ),
    ),
  );
}

/**
 * Preprocess variables for commerce-avalara-cert-user-certificates.tpl.php.
 */
function template_preprocess_commerce_avalara_cert_user_certificates(&$variables) {
  $variables['table'] = array(
    '#theme' => 'table',
    '#header' => array(
      t('State'),
      t('Signed date'),
      t('Expiration date'),
      t('Status'),
      t('View'),
    ),
    '#rows' => array(),
  );
  $empty_message = t('No tax certificates could be found.');

  if (empty($variables['customer_number'])) {
    $variables['table']['#empty'] = $empty_message;
    return;
  }

  // Add the customer code as a JS setting.
  drupal_add_js(array('commerce_avalara_cert' => array('customer_number' => $variables['customer_number'])), 'setting');

  // Consider the JS SDK as non present by default.
  $sdk_present = FALSE;
  $registration_key = variable_get('commerce_avalara_cert_registration_key', '');
  $client_id = commerce_avalara_cert_client_id();

  // Add the JS SDK and the "Renew" table header in case we have a registration
  // key.
  if (!empty($registration_key) && !empty($client_id)) {
    $sdk_present = TRUE;
    $client_id = check_plain($client_id);
    $registration_key = check_plain($registration_key);
    $variables['table']['#header'][] = t('Renew');
    drupal_add_library('system', 'ui.dialog');
    drupal_add_js(drupal_get_path('module', 'commerce_avalara_cert') . '/js/commerce_avalara_cert.user.js');
    drupal_add_js("https://app.certcapture.com/gencert2/js?cid=$client_id&key=$registration_key", 'external');
  }

  try {
    $avalara = commerce_avalara_cert_object();
    $exempt_reasons = $avalara->customersGetExemptReasons($variables['customer_number']);

    foreach ($exempt_reasons as $exempt_reason) {
      $tax_code_name = $exempt_reason['actual_tax_code']['name'];

      $status = t('Valid');
      // Logic stolen from the Avalara code sample.
      if (substr($tax_code_name, 0, 8) == 'EXPOSURE' || substr($tax_code_name, 0, 7) == 'TAXABLE') {
        if (substr($tax_code_name, 0, 8) == "EXPOSURE"){
          $status = substr($tax_code_name, 10, 25);
        }
        else {
          $status = t('TAXABLE');
        }
      }

      $row = array(
        $exempt_reason['exposure_zone']['name'],
        $exempt_reason['certificate']['signed_date'],
        $exempt_reason['certificate']['expiration_date'],
        $status,
        l('View', 'avalara-cert/' . $exempt_reason['certificate']['id'] . '/download'),
      );

      // If the SDK is present, add the renew link.
      if ($sdk_present) {
        $renew_link_options = array(
          'external' => TRUE,
          'attributes' => array(
            'data-state' => $exempt_reason['exposure_zone']['name'],
            'class' => array(
              'commerce-avalara-cert-renew',
            ),
          ),
        );
        $row[] = l('Renew', '#', $renew_link_options);
      }

      $variables['table']['#rows'][] = $row;
    }
  }
  catch (Exception $e) {
  }

  if (empty($variables['table']['#rows'])) {
    $variables['table']['table']['#empty'] = t('No tax certificates could be found.');
  }
}

/**
 * Themes the line item manager widget form element.
 */
function theme_commerce_avalara_cert_checkout($variables) {
  $registration_key = variable_get('commerce_avalara_cert_registration_key', '');
  $client_id = commerce_avalara_cert_client_id();
  // We need a customer code, a ship zone, a registration key & a client ID.
  if (user_is_anonymous() || empty($variables['ship_zone']) || empty($registration_key) || empty($client_id)) {
    return '';
  }
  $build = array(
    'certificate_dialog' => array(
      '#theme' => 'html_tag',
      '#tag' => 'div',
      '#value' => '',
      '#attributes' => array(
        'id' => 'commerce-avalara-cert-checkout-dialog',
      )
    ),
    'certificate_link' => array(
      '#text' => !empty($variables['text']) ? check_plain($variables['text']) : t('Submit a Certificate'),
      '#theme' => 'link',
      '#path' => url('avalara-cert/ajax-checkout'),
      '#options' => array(
        'attributes' => array(
          'class' => array(
            'use-ajax',
            'commerce-avalara-cert-submit-certificate',
          ),
        ),
        'html' => FALSE,
      ),
    ),
    '#attached' => array(
      'library' => array(
        array('system', 'drupal.ajax'),
        array('system', 'ui.dialog'),
      ),
      'js' => array(
        drupal_get_path('module', 'commerce_avalara_cert') . '/js/commerce_avalara_cert.checkout.js',
        "https://app.certcapture.com/gencert2/js?cid=$client_id&key=$registration_key",
        array(
          'data' => array(
            'commerce_avalara_cert' => array(
              'shipZone' => check_plain($variables['ship_zone']),
            ),
          ),
          'type' => 'setting'
        )
      ),
    ),
  );

  return drupal_render($build);
}

/**
 * Implements hook_permission().
 */
function commerce_avalara_cert_permission() {
  return array(
    'administer commerce_avalara_cert' => array(
      'title' => t('Administer Avalara CertCapture'),
      'description' => t('Allows users to configure Commerce Avalara CertCapture.'),
      'restrict access' => TRUE,
    ),
    'view own tax certificates' => array(
      'title' => t('View own tax certificates'),
      'description' => t('Allows users to view their own tax certificates.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Returns the Avalara CertCapture username.
 */
function commerce_avalara_cert_username() {
  return variable_get('commerce_avalara_cert_username', '');
}

/**
 * Returns the Avalara CertCapture password.
 */
function commerce_avalara_cert_password() {
  return variable_get('commerce_avalara_cert_password', '');
}

/**
 * Returns the configured client_id.
 */
function commerce_avalara_cert_client_id() {
  return variable_get('commerce_avalara_cert_client_id', '');
}

/**
 * Returns a statically cached instance of an AvalaraCert object.
 *
 * @param string $api_key
 *   The API key to use to submit requests to the Avatax API.
 * @param string $client_id
 *   The client_id, accessible from the "Company settings" page.
 *
 * @return AvalaraCert|bool.
 *   The constructed object or FALSE if the library could not be loaded.
 */
function commerce_avalara_cert_object($api_key = '', $client_id = '') {
  $avalara = &drupal_static(__FUNCTION__, array());

  // If the API key wasn't provided.
  if (empty($api_key)) {
    $username = commerce_avalara_cert_username();
    $password = commerce_avalara_cert_password();

    if (!empty($username) && !empty($password)) {
      $api_key = base64_encode("$username:$password");
    }
    else {
      return FALSE;
    }
  }

  // Defaults the client_id to the one configured if not specified.
  $client_id = $client_id ? $client_id : commerce_avalara_cert_client_id();

  if (empty($client_id)) {
    return FALSE;
  }

  if (!isset($avalara[$api_key])) {
    $logger = NULL;
    $headers = array(
      'x-client-id' => $client_id,
      // Use the customer_number for reference.
      'x-customer-primary-key' => 'customer_number',
    );

    // Specify the logger if the logging was enabled.
    if (variable_get('commerce_avalara_cert_logging', FALSE)) {
      $logger = 'watchdog';
    }

    $avalara[$api_key] = new AvalaraCert($api_key, $logger, $headers);
  }

  return $avalara[$api_key];
}

/**
 * Implements hook_field_access().
 */
function commerce_avalara_cert_field_access($op, $field, $entity_type, $entity, $account) {
  // Hide the customer code field.
  if ($field['field_name'] == 'commerce_avalara_customer_number' && $op == 'edit') {
    return user_access('administer commerce_avalara_cert', $account);
  }
}

/**
 * Implements hook_commerce_avatax_create_transaction_alter().
 */
function commerce_avalara_cert_commerce_avatax_create_transaction_alter(&$request_body, $order) {
  $supported_countries = array('US', 'CA');
  $address = $request_body['addresses']['shipTo'];
  // Check if the shipTo address is from US|CA and the "region" is not empty.
  if (!in_array($address['country'], $supported_countries) || empty($address['region']) || !$order->uid) {
    return;
  }
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Make sure we have a customer number available.
  if (!isset($order_wrapper->owner->commerce_avalara_customer_number)) {
    return;
  }
  $customer_number = $order_wrapper->owner->commerce_avalara_customer_number->value();

  if (empty($customer_number)) {
    return;
  }
  // Alter the customerCode parameter to use the one stored in the user object.
  $request_body['customerCode'] = $customer_number;

  // According to the documentation, sending an arbitrary string in
  // ExemptionNo should exempt the user from tax.
  // TODO: Probably cache the result or store it in the order's data array.
  if ($customer_is_exempt = commerce_avalara_cert_customer_is_exempt($customer_number, $address['region'])) {
    $request_body['ExemptionNo'] = 'EXEMPT';
  }
}

/**
 * Checks if the given customer is exempt from tax for a given zone.
 *
 * @param $customer_number
 *   The customer number.
 * @param $ship_zone
 *   The shipping zone initials (e.g: NC for North Carolina).
 *
 * @return bool
 *   TRUE if the customer is tax exempt, FALSE otherwise.
 */
function commerce_avalara_cert_customer_is_exempt($customer_number, $ship_zone) {
  try {
    $avalara = commerce_avalara_cert_object();
    $exempt_reasons = $avalara->customersGetExemptReasons($customer_number);

    foreach ($exempt_reasons as $exempt_reason) {
      $tax_code_name = $exempt_reason['actual_tax_code']['name'];
      // Skip irrelevant zones.
      if ($exempt_reason['exposure_zone']['state']['initials'] != $ship_zone ||
        substr($tax_code_name, 0, 8) == 'EXPOSURE' ||
        substr($tax_code_name, 0, 7) == 'TAXABLE') {
        continue;
      }
      // If we've reached this point, this means the user is tax exempt.
      return TRUE;
    }
  }
  catch (Exception $e) {
    return FALSE;
  }

  return FALSE;
}
